@page "/login"
@layout MealOrdering.Client.Shared.EmptyLayout
<PageTitle>Login | MealOrdering</PageTitle>

@using MealOrdering.Core.Utilities.Results.Concrete
@using MealOrdering.Client.Utilities
@using MealOrdering.Entities.Request
@using System.Net.Http.Headers

<div id="login-block">
    <div class="login-header">
        <span class="oi oi-person"></span>
        <span>Login</span>
    </div>
    <div class="login-content">
        <EditForm Model="@userLoginRequest" OnValidSubmit="LoginProcess">
            <DataAnnotationsValidator />
    
            <div class="form-group">
                <InputText @bind-Value="userLoginRequest.Email" id="email" class="form-control" placeholder="mealordering@gmail.com" autofocus />
                <label for="email">Email Address *</label>
            </div>
    
            <div class="form-group">
                <InputText @bind-Value="userLoginRequest.Password" id="password" type="@passwordInputType" class="form-control" placeholder="*****" />
                <label for="password">Password *</label>
                <span class="oi @passwordIcon" @onclick="TogglePassword"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-success">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UserLoginRequestDto userLoginRequest = new();
    private string passwordInputType = "password";
    private string passwordIcon = "oi-lock-locked";

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    IToastService toastService { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider _authenticationStateProvider { get; set; }

    private async Task LoginProcess()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("api/auth/login", userLoginRequest);

        if (httpResponse.IsSuccessStatusCode)
        {
            var res = await httpResponse.Content.ReadFromJsonAsync<ApiResult<AccessTokenResponseDto>>();

            if (res.Success)
            {
                await localStorageService.SetItemAsStringAsync("token", res.Data.Token);
                await localStorageService.SetItemAsStringAsync("email", userLoginRequest.Email);
                await localStorageService.SetItemAsStringAsync("firstName", res.Data.FirstName);
                await localStorageService.SetItemAsStringAsync("lastName", res.Data.LastName);

                (_authenticationStateProvider as LocalAuthStateProvider).NotifyUserLogin(userLoginRequest.Email);

                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", res.Data.Token);

                navigationManager.NavigateTo("/");
            }
            else
            {
                toastService.ShowError("User login is unsuccessful");
            }
        }
    }

    private void TogglePassword()
    {
        if(passwordInputType.Equals("password")) 
        { 
            passwordInputType = "text";
            passwordIcon = "oi-lock-unlocked";
        } 
        else 
        { 
            passwordInputType = "password";
            passwordIcon = "oi-lock-locked";
        } 
    }
}
